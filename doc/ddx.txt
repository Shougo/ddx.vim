*ddx.txt*	Dark deno-powered hexadecimal plugin for Vim/Neovim

Author: Shougo <Shougo.Matsu at gmail.com>
License: MIT license

CONTENTS                                                        *ddx-contents*

Introduction		|ddx-introduction|
Install			|ddx-install|
Interface		|ddx-interface|
  Options		  |ddx-options|
  Functions		  |ddx-functions|
  Custom Functions	  |ddx-custom-functions|
UIs			|ddx-uis|
  UI option	          |ddx-ui-options|
  UI params	          |ddx-ui-params|
Create UI		|ddx-create-ui|
  UI attributes		  |ddx-ui-attributes|
Examples		|ddx-examples|
FAQ			|ddx-faq|
Compatibility		|ddx-compatibility|


==============================================================================
INTRODUCTION                                                *ddx-introduction*

*ddx* is the abbreviation of "dark deno-powered heXadecimal".  It provides an
asynchronous hexadecimal editor UI.

If you don't want to configure plugins, you don't have to use the plugin.
It does not work with zero configuration.  You can use other plugins.


==============================================================================
INSTALL                                                          *ddx-install*

Note: ddx.vim requires Vim 9.1.0448+ or Neovim (0.10.0+).

Please install both Deno 1.45+ and "denops.vim" v8.0+.

https://deno.land/
https://github.com/vim-denops/denops.vim


==============================================================================
INTERFACE                                                      *ddx-interface*


------------------------------------------------------------------------------
OPTIONS                                                          *ddx-options*

                                                             *ddx-option-name*
name
		Specify the name.

		Default: "default"

                                                             *ddx-option-path*
path
		Specify the file path.

		Default: ""

                                                               *ddx-option-ui*
ui
		Specify UI name.
		Note: You must set the option in the first.

		Default: ""

                                                        *ddx-option-uiOptions*
uiOptions
		It is a dictionary that maps UI names to its options.  The
		options with the name "_" is used as the options for all
		UIs.
		See also |ddx-ui-options|.

		Default: {}

                                                         *ddx-option-uiParams*
uiParams
		It is a dictionary that maps UI names to its parameters.
		See also |ddx-ui-params|.

		Default: {}


------------------------------------------------------------------------------
FUNCTIONS                                                      *ddx-functions*

                                                                 *ddx#start()*
ddx#start({options})
		Creates a new ddx.
		Note: You cannot call it in |vim_starting|.  Because
		denops.vim is not initialized.

		Refer to |ddx-options| about {options}.  If you skip a value,
		it uses the default value.

                                                             *ddx#ui_action()*
ddx#ui_action({name}, {action}, {params})
		Do the {action} action in current UI.

		{name} is specified ddx name(|ddx-option-name|).

		{params} is action params.

CUSTOM FUNCTIONS                                        *ddx-custom-functions*

                                                          *ddx#custom#alias()*
ddx#custom#alias({type}, {alias-name}, {base-name})
		Define {alias-name} alias based on {base-name}.
		{type} must be "ui".
		Note: It must be called before initialization.

                                                    *ddx#custom#get_aliases()*
ddx#custom#get_aliases()
		Get aliases.

                                                    *ddx#custom#get_current()*
ddx#custom#get_current({name})
		Get current ddx options for {name}.
		{name} is specified by |ddx-option-name|.

                                                     *ddx#custom#get_global()*
ddx#custom#get_global()
		Get global options.

                                                      *ddx#custom#get_local()*
ddx#custom#get_local()
		Get current buffer specific options.

                                                    *ddx#custom#load_config()*
ddx#custom#load_config({path})
		Load TypeScript configuration from {path} file.
		NOTE: {path} must be full path.
		NOTE: The loading is asynchronous.
		NOTE: Import maps from "deno.json[c]" or "import_map.json[c]"
		file in the same directory will also be loaded.

                                                   *ddx#custom#patch_global()*
ddx#custom#patch_global({option-name}, {value})
ddx#custom#patch_global({dict})
		Set {option-name} option to {value}.
		If {dict} is available, the key is {option-name} and the value
		is {value}. See |ddx-options| for available {option-name}.

                                                    *ddx#custom#patch_local()*
ddx#custom#patch_local({buffer-name}, {option-name}, {value})
ddx#custom#patch_local({buffer-name}, {dict})
		Set local options for specific |ddx-option-name|.
		The arguments are the same as for |ddx#custom#patch_global()|.


==============================================================================
UIS                                                                  *ddx-uis*

Note: The UIs are not bundled in ddx.vim.  You need to install them
to use ddx.vim.  Please search them by https://github.com/topics/ddx-ui


------------------------------------------------------------------------------
UI OPTIONS                                                    *ddx-ui-options*

Note: The UIs cannot set default options for UI.  If the UI need
to specify the recommended configuration, you should write it in the
documentation instead.


------------------------------------------------------------------------------
UI PARAMS                                                      *ddx-ui-params*

These are the parameters that each UI can have.  Please read the UI
documentation.


==============================================================================
CREATE UI                                                      *ddx-create-ui*

To create UI, you should read other UIs implementation.

The UIs must put under "denops/@ddx-uis/*.ts".

UI class must extend the BaseUi class.

Note: It must be written in TypeScript language.

Note: If you call Vim functions, it is not asynchronous.


------------------------------------------------------------------------------
UI ATTRIBUTES                                              *ddx-ui-attributes*

                                                    *ddx-ui-attribute-actions*
actions			(Record<string, function>)	(Optional)
		Defines UI actions.
		The actions are called from |ddx#ui_action()|.

                                                     *ddx-ui-attribute-onInit*
onInit			(function)			(Optional)
		Called before call UI functions.

                                                     *ddx-ui-attribute-params*
params			(function)			(Required)
		Called to get UI params.


==============================================================================
EXAMPLES                                                        *ddx-examples*
>vim
	" You must set the default ui.
	" Note: hex ui
	call ddx#custom#patch_global({
	    \ 'ui': 'hex',
	    \ })
<

==============================================================================
FREQUENTLY ASKED QUESTIONS (FAQ)			*ddx-faq*

FAQ 1:                                                             |ddx-faq-1|
	How to donate money to you?

FAQ 2:                                                             |ddx-faq-2|
	I want to use ":Ddx" command like ":Vinarise" in vinarise.nvim.


------------------------------------------------------------------------------
                                                                   *ddx-faq-1*
Q: How to donate money to you?

A: I have started github sponsorship to spend more time for Vim/Neovim
plugins.  You can donate money to help me!

   https://github.com/sponsors/Shougo

                                                                   *ddx-faq-2*
Q: I want to use ":Ddx" command like ":Vinarise" in vinarise.nvim.

A: You can use ddx-commands.vim.
https://github.com/Shougo/ddx-commands.vim
It is not all users needed plugin and users can define the original commands.


==============================================================================
COMPATIBILITY                                              *ddx-compatibility*

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
